using DotnetDependencyAnalyzer.PackageUtils;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace DotnetDependencyAnalyzer.Vulnerabilities
{
    public class VulnerabilityEvaluation
    {
        private static readonly string apiUrl = "http://localhost:8080/nuget/dependency/vulnerabilities";

        public static async Task<VulnerabilityEvaluationResult[]> EvaluatePackage(List<NuGetPackage> packages)
        {
            List<Artifacts> artifacts = new List<Artifacts>();
            packages.ForEach(package => artifacts.Add(new Artifacts("nuget", package.Id, package.Version)));
            string body = JsonConvert.SerializeObject(artifacts);
            HttpClient httpClient = DependencyAnalyzer.Client;
            HttpResponseMessage resp = await httpClient.PostAsync(apiUrl, new StringContent(body, Encoding.UTF8, "application/json"));    
            if (resp.IsSuccessStatusCode)
            {
                var respBody = await resp.Content.ReadAsStringAsync();
                VulnerabilityEvaluationResult[] vulnerabilityEvaluationResult = JsonConvert.DeserializeObject<VulnerabilityEvaluationResult[]>(respBody);
                return vulnerabilityEvaluationResult;
            }
            return null;
        }
    }

    [Serializable]
    class Artifacts
    {
        [JsonProperty("pm")]
        public string Pm;

        [JsonProperty("name")]
        public string Name;

        [JsonProperty("version")]
        public string Version;

        public Artifacts(string pm, string id, string version)
        {
            Pm = pm;
            Name = id;
            Version = version;
        }
    }
}
