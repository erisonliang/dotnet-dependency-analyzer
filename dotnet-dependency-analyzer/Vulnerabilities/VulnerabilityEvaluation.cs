using DotnetDependencyAnalyzer.NetCore.PackageUtils;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace DotnetDependencyAnalyzer.NetCore.Vulnerabilities
{
    public class VulnerabilityEvaluation
    {
        private static readonly string apiUrl = "http://35.234.147.77/nuget/dependency/vulnerabilities";

        /// <summary>
        /// Requests server proxy to get vulnerabilities of packages.
        /// </summary>
        /// <param name="packages">Packages to be evaluated.</param>
        /// <param name="maxAge">Specifies the maximum of time a resource in proxy cache is considered valid.</param>
        /// <returns></returns>
        public static async Task<VulnerabilityEvaluationResult[]> EvaluatePackage(List<NuGetPackage> packages, int maxAge)
        {
            List<Artifacts> artifacts = new List<Artifacts>();
            packages.ForEach(package => artifacts.Add(new Artifacts("nuget", package.Id, package.Version)));
            string body = JsonConvert.SerializeObject(artifacts);
            HttpClient httpClient = DependencyAnalyzer.Client;
            HttpRequestMessage req = new HttpRequestMessage(HttpMethod.Post, apiUrl)
            {
                Content = new StringContent(body, Encoding.UTF8, "application/json")
            };
            req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", Environment.GetEnvironmentVariable("OSDA_PROXY_TOKEN"));
            req.Headers.CacheControl = new CacheControlHeaderValue() { MaxAge = new TimeSpan(0, 0, maxAge) };
            HttpResponseMessage resp;
            try
            {
                resp = await httpClient.SendAsync(req);
            }
            catch (HttpRequestException)
            {
                throw new Exception("Cannot reach central server.");
            }

            if (!resp.IsSuccessStatusCode)
            {
                throw new Exception(await resp.Content.ReadAsStringAsync());
            }
            string respBody = await resp.Content.ReadAsStringAsync();
            VulnerabilityEvaluationResult[] vulnerabilityEvaluationResult = JsonConvert.DeserializeObject<VulnerabilityEvaluationResult[]>(respBody);
            return vulnerabilityEvaluationResult;
        }
    }

    /// <summary>
    /// Artifacts passed in the body of vulnerabilities requests.
    /// </summary>
    [Serializable]
    class Artifacts
    {
        /// <summary>
        /// Package manager.
        /// </summary>
        [JsonProperty("pm")]
        public string Pm;

        /// <summary>
        /// Package id.
        /// </summary>
        [JsonProperty("name")]
        public string Name;

        /// <summary>
        /// Package version.
        /// </summary>
        [JsonProperty("version")]
        public string Version;

        public Artifacts(string pm, string id, string version)
        {
            Pm = pm;
            Name = id;
            Version = version;
        }
    }
}
